// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SPaySdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
@_exported import SPaySdk
import Security
import Swift
import SwiftUI
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias Action = (() -> Swift.Void)
public enum NetworkState : Swift.String, Swift.CaseIterable, Swift.Codable {
  case Mocker, Prom, Ift, Psi, Local
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SPaySdk.NetworkState]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [SPaySdk.NetworkState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum SBAxis {
  case horizontal
  case vertical
  case x
  case y
  public static func == (a: SPaySdk.SBAxis, b: SPaySdk.SBAxis) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(SConfig) final public class SBHelperConfig : ObjectiveC.NSObject {
  @objc public init(sbp: Swift.Bool = true, creditCard: Swift.Bool = true, debitCard: Swift.Bool = true)
  @objc deinit
}
@objc @IBDesignable @_Concurrency.MainActor @preconcurrency final public class SBPButton : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public var tapAction: SPaySdk.Action?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum SPayState : Swift.Int {
  case success = 0
  case waiting
  case cancel
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SBShimmeringView : UIKit.UIView {
  var shimmeringAnimatedItems: [UIKit.UIView] { get }
  var excludedItems: Swift.Set<UIKit.UIView> { get }
}
extension SPaySdk.SBShimmeringView {
  public var shimmeringAnimatedItems: [UIKit.UIView] {
    get
  }
  public var excludedItems: Swift.Set<UIKit.UIView> {
    get
  }
}
@objc(SBindingPaymentRequest) final public class SBindingPaymentRequest : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, merchantLogin: Swift.String, bankInvoiceId: Swift.String, orderNumber: Swift.String, bindingId: Swift.String, redirectUri: Swift.String)
  @objc deinit
}
@objc(SBankInvoiceIdPaymentRequest) final public class SBankInvoicePaymentRequest : ObjectiveC.NSObject {
  @objc public init(merchantLogin: Swift.String? = nil, bankInvoiceId: Swift.String, orderNumber: Swift.String, language: Swift.String? = nil, redirectUri: Swift.String, apiKey: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class SPError : ObjectiveC.NSObject {
  @objc public var errorDescription: Swift.String
  @objc deinit
}
@objc public enum SEnvironment : Swift.Int {
  case prod = 0
  case sandboxWithoutBankApp
  case sandboxRealBankApp
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class SPay : ObjectiveC.NSObject {
  @objc public static func setup(bnplPlan: Swift.Bool = true, spasiboBonuses: Swift.Bool = true, resultViewNeeded: Swift.Bool = true, helpers: Swift.Bool = true, needLogs: Swift.Bool = true, helperConfig: SPaySdk.SBHelperConfig = SBHelperConfig(), environment: SPaySdk.SEnvironment = .prod, completion: ((SPaySdk.SPError?) -> Swift.Void)? = nil)
  @objc public static var isReadyForSPay: Swift.Bool {
    @objc get
  }
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithBankInvoiceId(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithPaymentAccounts(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithPaymentAccounts(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithoutRefresh(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func pay(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @objc public static func pay(view: UIKit.UIViewController, method: SPaySdk.SPayMethod, request: SPaySdk.SPaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ localSessionId: Swift.String, _ bankInvoiceId: Swift.String, _ description: Swift.String) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithPartPay(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithBankInvoiceId(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithoutRefresh(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func pay(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithPartPay(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithBinding(with viewController: UIKit.UIViewController, paymentRequest: SPaySdk.SBindingPaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Используйте новый метод pay")
  @objc public static func payWithBonuses(paymentRequest: SPaySdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: SPaySdk.SPayState, _ info: Swift.String, _ localSessionId: Swift.String?) -> Swift.Void)
  @objc public static func getAuthURL(_ url: Foundation.URL)
  @objc public static func setBankScheme(_ url: Foundation.URL) throws
  @objc public static func logout()
  @objc override dynamic public init()
  @objc deinit
}
@objc(SPayMethod) public enum SPayMethod : Swift.Int {
  case `default`
  case withBankInvoiceId
  case withBonuses
  case withoutRefresh
  case withPaymentAccount
  case withPartPay
  case withBinding
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SPaymentRequest) final public class SPaymentRequest : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, bankInvoiceId: Swift.String, orderNumber: Swift.String, merchantLogin: Swift.String, redirectUri: Swift.String, binding: Swift.String? = nil)
  @objc deinit
}
extension UIKit.UIImageView : SPaySdk.SBShimmeringView {
}
public protocol ReusableView : AnyObject {
}
extension SPaySdk.ReusableView where Self : UIKit.UIView {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UITableViewCell : SPaySdk.ReusableView {
}
extension UIKit.UITableViewHeaderFooterView : SPaySdk.ReusableView {
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func register<T>(cellClass: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func register<T>(aClass: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor @preconcurrency public func dequeueResuableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func dequeueReusableHeaderFooterView<T>() -> T where T : UIKit.UITableViewHeaderFooterView
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
}
#else
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
}
#endif
extension SPaySdk.NetworkState : Swift.Equatable {}
extension SPaySdk.NetworkState : Swift.Hashable {}
extension SPaySdk.NetworkState : Swift.RawRepresentable {}
extension SPaySdk.SBAxis : Swift.Equatable {}
extension SPaySdk.SBAxis : Swift.Hashable {}
extension SPaySdk.SPayState : Swift.Equatable {}
extension SPaySdk.SPayState : Swift.Hashable {}
extension SPaySdk.SPayState : Swift.RawRepresentable {}
extension SPaySdk.SEnvironment : Swift.Equatable {}
extension SPaySdk.SEnvironment : Swift.Hashable {}
extension SPaySdk.SEnvironment : Swift.RawRepresentable {}
extension SPaySdk.SPayMethod : Swift.Equatable {}
extension SPaySdk.SPayMethod : Swift.Hashable {}
extension SPaySdk.SPayMethod : Swift.RawRepresentable {}
